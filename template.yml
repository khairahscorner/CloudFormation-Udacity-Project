Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: UdacityProject-2
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: Specify CIDR block for public subnet 1
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: Specify CIDR block for public subnet 2
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CIDR:
    Description: Specify CIDR block for private subnet 1
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CIDR:
    Description: Specify CIDR block for private subnet 2
    Type: String
    Default: 10.0.3.0/24
  LaunchConfigAMI:
    Description: Image id for launch config
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Instance type in launch config
    Type: String
  MyIp:
    Description: Computer IP address
    Type: String

Resources:
  UdacityS3ReadOnlyEC2: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
      Description: Role for read only access to s3
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      MaxSessionDuration: 14400
      RoleName: Project2CustomRole
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} S3ReadOnly Role

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway1
      VpcId: !Ref VPC1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 2
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2

  MyEIP1:
    Type: AWS::EC2::EIP
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyEIP 1
 
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public route table
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} private route table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PublicSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  AppServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for the servers
      GroupName: AppServersSG
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        Description: allow access incoming traffic
        FromPort: 80
        ToPort: 80
      SecurityGroupEgress: 
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        Description: permit all outgoing traffic from all ports
        FromPort: 0
        ToPort: 65535
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} app servers security group
      VpcId: !Ref VPC1
  
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for load balancer
      GroupName: LoadBalancerSG
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        Description: allow access, incoming internet traffic
        FromPort: 80
        ToPort: 80
      SecurityGroupEgress: 
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        Description: permit outgoing traffic
        FromPort: 80
        ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} load balancer security group
      VpcId: !Ref VPC1

  ServersLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: !Ref LaunchConfigAMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref AppServersSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "It works! Udagram, Udacity!" > index.html

  ServersTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC1
  
  ServersAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      MaxSize: '6'
      MinSize: '4'
      VPCZoneIdentifier:
        -  !Ref PrivateSubnet1
        -  !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref ServersLaunchConfig
      TargetGroupARNs:
        - !Ref ServersTargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Subnets:
        -  !Ref PublicSubnet1
        -  !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} load balancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServersTargetGroup
      Port: 80
      Protocol: HTTP
  
  ALBRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServersTargetGroup
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: [/]

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for the bastion host
      GroupName: BastionHostSG
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: !Ref MyIp
        Description: allow access via ssh terminal
        FromPort: 22  
        ToPort: 22
      SecurityGroupEgress: 
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        Description: permit all outgoing traffic from all ports
        FromPort: 0
        ToPort: 65535
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} host server security group
      VpcId: !Ref VPC1

  BastionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: HostTemplate
      LaunchTemplateData:
        ImageId: !Ref LaunchConfigAMI
        InstanceType: !Ref InstanceType
        KeyName: nd9990_keypair
        SecurityGroupIds:
          - !Ref BastionSecurityGroup

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      MaxSize: '3'
      MinSize: '2'
      VPCZoneIdentifier:
        -  !Ref PublicSubnet1
        -  !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionLaunchTemplate
        Version: !GetAtt BastionLaunchTemplate.LatestVersionNumber

Outputs:
  LoadBalancerURL:
    Description: load balancer url
    Value: 
      Fn::Join: ["", ["http://", !GetAtt LoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LB
